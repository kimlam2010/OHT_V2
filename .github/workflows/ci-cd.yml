name: OHT-50 Backend CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: oht-50-backend
  PYTHON_VERSION: '3.11'

jobs:
  validate-structure:
    name: Validate Backend Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate backend structure
        run: |
          echo "üîç Validating backend structure..."
          
          # Check required directories
          required_dirs=(
            "backend/app"
            "backend/app/api"
            "backend/app/api/v1"
            "backend/app/core"
            "backend/app/services"
            "backend/app/models"
            "backend/app/schemas"
            "backend/tests"
            "backend/docker"
            "backend/docs"
            "backend/scripts"
          )
          
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing directory: $dir"
              exit 1
            fi
          done
          
          # Check required files
          required_files=(
            "backend/app/main.py"
            "backend/app/config.py"
            "backend/app/__init__.py"
            "backend/requirements.txt"
            "backend/pyproject.toml"
            "backend/README.md"
            "backend/docker/Dockerfile"
            "backend/docker/docker-compose.yml"
            "backend/env.example"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing file: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ Backend structure validation passed"

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Check code formatting with black
        working-directory: ./backend
        run: |
          black --check --diff app

      - name: Check import sorting with isort
        working-directory: ./backend
        run: |
          isort --check-only --diff app

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type checking with mypy
        working-directory: ./backend
        run: |
          mypy app --ignore-missing-imports --no-strict-optional

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: validate-structure
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Security scan with bandit
        working-directory: ./backend
        run: |
          bandit -r app -f json -o bandit-report.json || true
          bandit -r app

      - name: Dependency vulnerability scan
        working-directory: ./backend
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, security]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx coverage

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: Check coverage threshold
        working-directory: ./backend
        run: |
          coverage report --fail-under=70

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            backend/htmlcov/
            backend/.coverage

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Docker image
        run: |
          # Test the built image
          docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.meta.outputs.version }} python -c "import app; print('‚úÖ Backend app imports successfully')"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Deploy to development environment
        run: |
          echo "üöÄ Deploying to development environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build.outputs.version }}"
          echo "‚úÖ Development deployment completed"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build.outputs.version }}"
          echo "‚úÖ Production deployment completed"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-dev.result }}" == "success" ] || [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
          fi
