---
alwaysApply: true
---

# üîß EMBED TEAM RULES - OHT-50

**Phi√™n b·∫£n:** v1.0  
**Ng√†y c·∫≠p nh·∫≠t:** 2025-01-28  
**M·ª•c ti√™u:** Chu·∫©n h√≥a quy tr√¨nh ph√°t tri·ªÉn ph·∫ßn c·ª©ng v√† firmware cho OHT-50 v·ªõi focus v√†o hardware bring-up, driver development v√† system integration

---

## üéØ **VAI TR√í & TR√ÅCH NHI·ªÜM EMBED TEAM**

### **üîå EMBED HARDWARE ENGINEER**
- **Hardware Bring-up:** Platform initialization, pinmux configuration, hardware validation
- **Driver Development:** HAL drivers, device drivers, hardware abstraction layer
- **System Integration:** Hardware-firmware integration, performance optimization
- **Quality Assurance:** Hardware testing, validation, compliance verification

### **‚öôÔ∏è FIRMWARE ENGINEER** 
- **Low-level Firmware:** HAL implementation, device control, real-time operations
- **Communication Protocols:** RS485, CAN, Ethernet, wireless communication
- **Safety Systems:** E-Stop implementation, safety monitoring, fault handling
- **Performance Optimization:** Real-time constraints, resource optimization

---

## üö® **CRITICAL REQUIREMENTS (B·∫ÆT BU·ªòC)**

### **1. HARDWARE PLATFORM COMPLIANCE**
```
‚úÖ PLATFORM CHU·∫®N: Orange Pi 5B (RK3588)
‚úÖ RS485 INTERFACE: UART1 (/dev/ttyS1 ‚Üí /dev/ttyOHT485)
‚úÖ GPIO CONTROL: GPIO1_D3 (Relay1), GPIO1_D2 (Relay2)
‚úÖ SAFETY SYSTEM: E-Stop hardware implementation
‚úÖ LED INDICATORS: 5x status LEDs (Power, System, Comm, Network, Error)
```

### **2. HARDWARE VALIDATION REQUIREMENTS**
```
BEFORE APPROVAL:
‚ñ° Hardware bring-up completed v√† validated
‚ñ° All interfaces tested v√† functional
‚ñ° Driver integration verified
‚ñ° Performance benchmarks met
‚ñ° Safety systems validated
```

### **3. FIRMWARE INTEGRATION COMPLIANCE**
```
MUST FOLLOW:
- HAL API standards theo architecture documents
- Real-time constraints compliance
- Safety system integration
- Communication protocol implementation
- Error handling v√† recovery mechanisms
```

---

## üìã **QUY TR√åNH DEVELOPMENT 6 B∆Ø·ªöC (B·∫ÆT BU·ªòC)**

### **B∆Ø·ªöC 1: HARDWARE SPECIFICATION REVIEW**
```
EMBED Hardware Engineer MUST:
‚ñ° Review platform specifications (Orange Pi 5B)
‚ñ° Validate pinout v√† GPIO assignments
‚ñ° Confirm interface requirements (RS485, GPIO, LEDs)
‚ñ° Approve hardware design v√† layout
‚ñ° Document hardware specifications
```

### **B∆Ø·ªöC 2: HARDWARE BRING-UP**
```
EMBED Hardware Engineer MUST:
‚ñ° Initialize platform (power, clock, I/O)
‚ñ° Configure pinmux v√† pinctrl
‚ñ° Enable UART1 trong device tree
‚ñ° Setup RS485 transceiver (DE/RE, termination)
‚ñ° Validate GPIO control (GPIO1_D3, GPIO1_D2)
‚ñ° Test LED indicators
‚ñ° Create udev rules cho /dev/ttyOHT485
```

### **B∆Ø·ªöC 3: DRIVER DEVELOPMENT**
```
Firmware Engineer MUST:
‚ñ° Implement HAL UART/RS485 drivers
‚ñ° Develop GPIO/Relay control drivers
‚ñ° Create LED status management
‚ñ° Implement safety system drivers
‚ñ° Add error handling v√† recovery
‚ñ° Create driver simulation cho development
```

### **B∆Ø·ªöC 4: SYSTEM INTEGRATION**
```
Both Teams MUST:
‚ñ° Integrate hardware v·ªõi firmware
‚ñ° Test end-to-end functionality
‚ñ° Validate performance requirements
‚ñ° Test safety system operation
‚ñ° Verify communication protocols
‚ñ° Optimize system performance
```

### **B∆Ø·ªöC 5: HARDWARE-IN-THE-LOOP TESTING**
```
EMBED Team MUST:
‚ñ° Setup HIL test bench
‚ñ° Execute loopback testing
‚ñ° Measure BER v√† latency
‚ñ° Test fault injection
‚ñ° Validate safety responses
‚ñ° Document test results
```

### **B∆Ø·ªöC 6: VALIDATION & DOCUMENTATION**
```
EMBED Team Lead MUST:
‚ñ° Review all deliverables
‚ñ° Validate compliance v·ªõi specifications
‚ñ° Approve hardware v√† firmware integration
‚ñ° Update documentation
‚ñ° Sign-off cho production readiness
```

---

## üîß **HARDWARE STANDARDS**

### **Platform Configuration (B·∫ÆT BU·ªòC)**
```bash
# Orange Pi 5B Platform Setup
# Device Tree Configuration
/boot/dtb/rockchip/rk3588s-orangepi-5b.dtb

# UART1 Enable for RS485
&uart1 {
    status = "okay";
    pinctrl-names = "default";
    pinctrl-0 = <&uart1m1_xfer>;
};

# GPIO Configuration for Relays
&gpio1 {
    status = "okay";
    relay1 {
        gpios = <&gpio1 RK_PD3 GPIO_ACTIVE_HIGH>;
        label = "relay1";
    };
    relay2 {
        gpios = <&gpio1 RK_PD2 GPIO_ACTIVE_HIGH>;
        label = "relay2";
    };
};
```

### **RS485 Interface Standards (B·∫ÆT BU·ªòC)**
```c
// RS485 HAL Implementation
typedef struct {
    int uart_fd;
    int de_re_gpio;
    uint32_t baudrate;
    uint8_t data_bits;
    uint8_t stop_bits;
    char parity;
    bool termination_enabled;
} rs485_config_t;

// RS485 API
int rs485_init(rs485_config_t *config);
int rs485_send(uint8_t *data, size_t len);
int rs485_receive(uint8_t *buffer, size_t max_len, uint32_t timeout_ms);
int rs485_set_termination(bool enable);
void rs485_get_stats(rs485_stats_t *stats);
```

### **GPIO/Relay Control Standards (B·∫ÆT BU·ªòC)**
```c
// GPIO HAL Implementation
typedef enum {
    RELAY_CHANNEL_1 = 1,
    RELAY_CHANNEL_2 = 2
} relay_channel_t;

// Relay Control API
int relay_init(void);
int relay_set(relay_channel_t channel, bool state);
bool relay_get(relay_channel_t channel);
int relay_toggle(relay_channel_t channel);
void relay_emergency_off_all(void);
```

---

## üîç **QUALITY CONTROL CHECKLIST**

### **Hardware Validation Checklist (MUST PASS)**
```
‚ñ° Platform boots successfully
‚ñ° All interfaces initialized properly
‚ñ° UART1 accessible t·∫°i /dev/ttyOHT485
‚ñ° RS485 communication functional
‚ñ° GPIO control working (GPIO1_D3, GPIO1_D2)
‚ñ° LED indicators responsive
‚ñ° Power consumption trong gi·ªõi h·∫°n
‚ñ° Temperature operating range validated
‚ñ° EMI/EMC compliance preliminary check
‚ñ° Mechanical fit v√† finish acceptable
```

### **Driver Integration Checklist (MUST PASS)**
```
‚ñ° HAL drivers compile without errors
‚ñ° API functions work as specified
‚ñ° Error handling comprehensive
‚ñ° Memory leaks eliminated
‚ñ° Performance requirements met
‚ñ° Thread safety implemented
‚ñ° Resource cleanup proper
‚ñ° Documentation complete
‚ñ° Unit tests passing
‚ñ° Integration tests successful
```

### **Safety System Checklist (MUST PASS)**
```
‚ñ° E-Stop hardware circuit functional
‚ñ° Safety response time < 100ms
‚ñ° Fail-safe behavior verified
‚ñ° Fault detection working
‚ñ° Recovery procedures tested
‚ñ° Safety interlocks operational
‚ñ° Emergency shutdown complete
‚ñ° Safety documentation updated
‚ñ° Safety test procedures documented
‚ñ° Compliance validation completed
```

---

## üß™ **TESTING REQUIREMENTS**

### **Hardware-in-the-Loop Testing (B·∫ÆT BU·ªòC)**
```python
# HIL Test Framework
class HILTestSuite:
    def __init__(self):
        self.test_bench = HILTestBench()
        self.metrics = TestMetrics()
        
    def test_rs485_loopback(self):
        """Test RS485 communication loopback"""
        # Send test patterns
        # Measure BER, latency, throughput
        # Validate CRC, timeout handling
        pass
        
    def test_gpio_control(self):
        """Test GPIO/Relay control"""
        # Test relay switching
        # Measure response time
        # Validate state consistency
        pass
        
    def test_safety_system(self):
        """Test safety system response"""
        # Trigger E-Stop
        # Measure response time
        # Validate fail-safe behavior
        pass
```

### **Performance Benchmarking (B·∫ÆT BU·ªòC)**
```c
// Performance Test Implementation
typedef struct {
    uint32_t rs485_baudrate;
    uint32_t rs485_latency_us;
    float rs485_ber;
    uint32_t gpio_response_time_us;
    uint32_t safety_response_time_ms;
    float cpu_usage_percent;
    uint32_t memory_usage_kb;
} performance_metrics_t;

void run_performance_tests(performance_metrics_t *metrics);
bool validate_performance_requirements(performance_metrics_t *metrics);
```

---

## üö® **COMMON MISTAKES TO AVOID**

### **HARDWARE MISTAKES**
```
‚ùå Sai GPIO offset ho·∫∑c pinmux configuration
‚ùå Thi·∫øu termination ho·∫∑c bias cho RS485
‚ùå Kh√¥ng ki·ªÉm tra power consumption
‚ùå B·ªè qua EMI/EMC considerations
‚ùå Thi·∫øu protection circuits
‚ùå Kh√¥ng test thermal performance
```

### **FIRMWARE MISTAKES**
```
‚ùå Blocking operations trong real-time context
‚ùå Kh√¥ng handle timeouts properly
‚ùå Memory leaks trong drivers
‚ùå Race conditions trong multi-threaded code
‚ùå Insufficient error handling
‚ùå Poor resource management
```

### **INTEGRATION MISTAKES**
```
‚ùå Kh√¥ng test v·ªõi real hardware
‚ùå Mock data trong production builds
‚ùå Inconsistent API interfaces
‚ùå Missing safety interlocks
‚ùå Poor performance optimization
‚ùå Inadequate documentation
```

---

## üìÅ **FILE STRUCTURE & NAMING**

### **Hardware Documentation Structure**
```
docs/
‚îú‚îÄ‚îÄ hardware/
‚îÇ   ‚îú‚îÄ‚îÄ platform_orangepi_5b.md
‚îÇ   ‚îú‚îÄ‚îÄ pinout_gpio_mapping.md
‚îÇ   ‚îú‚îÄ‚îÄ rs485_interface_spec.md
‚îÇ   ‚îú‚îÄ‚îÄ safety_system_design.md
‚îÇ   ‚îî‚îÄ‚îÄ performance_requirements.md
‚îú‚îÄ‚îÄ firmware/
‚îÇ   ‚îú‚îÄ‚îÄ hal_api_specification.md
‚îÇ   ‚îú‚îÄ‚îÄ driver_development_guide.md
‚îÇ   ‚îú‚îÄ‚îÄ safety_implementation.md
‚îÇ   ‚îî‚îÄ‚îÄ testing_procedures.md
‚îî‚îÄ‚îÄ validation/
    ‚îú‚îÄ‚îÄ hil_test_procedures.md
    ‚îú‚îÄ‚îÄ performance_benchmarks.md
    ‚îî‚îÄ‚îÄ compliance_validation.md
```

### **Code Structure**
```
firmware/
‚îú‚îÄ‚îÄ hal/
‚îÇ   ‚îú‚îÄ‚îÄ hal_uart_rs485.c/.h
‚îÇ   ‚îú‚îÄ‚îÄ hal_gpio_relay.c/.h
‚îÇ   ‚îú‚îÄ‚îÄ hal_led_status.c/.h
‚îÇ   ‚îî‚îÄ‚îÄ hal_safety_system.c/.h
‚îú‚îÄ‚îÄ drivers/
‚îÇ   ‚îú‚îÄ‚îÄ rs485_driver.c/.h
‚îÇ   ‚îú‚îÄ‚îÄ relay_driver.c/.h
‚îÇ   ‚îî‚îÄ‚îÄ safety_driver.c/.h
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ unit_tests/
‚îÇ   ‚îú‚îÄ‚îÄ integration_tests/
‚îÇ   ‚îî‚îÄ‚îÄ hil_tests/
‚îî‚îÄ‚îÄ tools/
    ‚îú‚îÄ‚îÄ relayctl.c
    ‚îú‚îÄ‚îÄ rs485test.c
    ‚îî‚îÄ‚îÄ performance_test.c
```

---

## üìä **SUCCESS METRICS**

### **Hardware Success Metrics**
```
‚úÖ 100% hardware interfaces functional
‚úÖ 100% GPIO control working
‚úÖ RS485 BER < specified threshold
‚úÖ Safety response time < 100ms
‚úÖ 0 hardware-related critical issues
‚úÖ Power consumption trong gi·ªõi h·∫°n
```

### **Firmware Success Metrics**
```
‚úÖ 100% HAL API functions implemented
‚úÖ 100% driver integration successful
‚úÖ 0 memory leaks trong production code
‚úÖ Performance requirements met
‚úÖ 100% safety tests passing
‚úÖ Code coverage > 90%
```

### **Integration Success Metrics**
```
‚úÖ 100% HIL tests passing
‚úÖ End-to-end functionality verified
‚úÖ Performance benchmarks achieved
‚úÖ Safety validation completed
‚úÖ Documentation 100% updated
‚úÖ Production readiness achieved
```

---

## üöÄ **IMPLEMENTATION GUIDELINES**

### **For EMBED Hardware Engineer**
1. **Always validate hardware tr∆∞·ªõc khi firmware development**
2. **Document all GPIO assignments v√† pinout mappings**
3. **Test hardware interfaces thoroughly**
4. **Ensure proper power v√† thermal management**
5. **Validate safety systems comprehensively**

### **For Firmware Engineer**
1. **Follow HAL API standards strictly**
2. **Implement comprehensive error handling**
3. **Optimize cho real-time performance**
4. **Add extensive logging v√† diagnostics**
5. **Test v·ªõi real hardware continuously**

### **For EMBED Team Lead**
1. **Review all hardware v√† firmware integration**
2. **Ensure compliance v·ªõi specifications**
3. **Validate performance requirements**
4. **Approve production readiness**
5. **Maintain technical documentation**

---

## üîÑ **CONTINUOUS IMPROVEMENT**

### **Performance Monitoring**
```c
// Continuous Performance Monitoring
typedef struct {
    uint32_t uptime_seconds;
    uint32_t error_count;
    uint32_t timeout_count;
    uint32_t crc_error_count;
    float average_latency_ms;
    float cpu_usage_percent;
    uint32_t memory_usage_kb;
} system_health_t;

void monitor_system_health(system_health_t *health);
void log_performance_metrics(system_health_t *health);
bool check_health_thresholds(system_health_t *health);
```

### **Quality Improvement Process**
1. **Weekly performance review**
2. **Monthly hardware health assessment**
3. **Quarterly technology update evaluation**
4. **Annual platform roadmap planning**
5. **Continuous learning v√† skill development**

---

**üö® REMEMBER: Hardware reliability is the foundation of system safety!**

**Changelog v1.0:**
- ‚úÖ Created comprehensive EMBED team rules
- ‚úÖ Added hardware platform specifications
- ‚úÖ Added driver development standards
- ‚úÖ Added HIL testing requirements
- ‚úÖ Added safety system validation
- ‚úÖ Added performance monitoring guidelines
- ‚úÖ Added quality control checklists
- ‚úÖ Added continuous improvement process

**üö® L∆∞u √Ω:** EMBED team ph·∫£i tu√¢n th·ªß strict hardware validation v√† safety standards ƒë·ªÉ ƒë·∫£m b·∫£o system reliability v√† operational safety.
