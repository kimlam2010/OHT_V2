#!/bin/bash
# üîç RS485 Debug Script - OHT-50
# Phi√™n b·∫£n: 1.0
# M·ª•c ƒë√≠ch: Ch·∫©n ƒëo√°n v·∫•n ƒë·ªÅ RS485 kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ slave

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}üîç RS485 DEBUG SCRIPT - OHT-50${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# 1. Ki·ªÉm tra device t·ªìn t·∫°i
echo -e "${YELLOW}üìå [1/8] Ki·ªÉm tra /dev/ttyOHT485...${NC}"
if [ -e /dev/ttyOHT485 ]; then
    ls -la /dev/ttyOHT485
    echo -e "${GREEN}‚úÖ Device t·ªìn t·∫°i${NC}"
else
    echo -e "${RED}‚ùå Device kh√¥ng t·ªìn t·∫°i! Ki·ªÉm tra udev rules.${NC}"
    exit 1
fi
echo ""

# 2. Ki·ªÉm tra UART1 trong kernel
echo -e "${YELLOW}üìå [2/8] Ki·ªÉm tra UART1 trong kernel log...${NC}"
if dmesg | grep -q "ttyS1"; then
    dmesg | grep ttyS1 | tail -5
    echo -e "${GREEN}‚úÖ UART1 ƒë√£ ƒë∆∞·ª£c nh·∫≠n di·ªán${NC}"
else
    echo -e "${RED}‚ùå UART1 kh√¥ng xu·∫•t hi·ªán trong kernel log!${NC}"
fi
echo ""

# 3. Ki·ªÉm tra c·∫•u h√¨nh UART
echo -e "${YELLOW}üìå [3/8] Ki·ªÉm tra c·∫•u h√¨nh UART hi·ªán t·∫°i...${NC}"
stty -F /dev/ttyOHT485 -a
echo ""

# 4. C·∫•u h√¨nh l·∫°i UART chu·∫©n RS485 Modbus RTU
echo -e "${YELLOW}üìå [4/8] C·∫•u h√¨nh UART 115200 8N1...${NC}"
stty -F /dev/ttyOHT485 \
    115200 \
    cs8 \
    -cstopb \
    -parenb \
    -echo \
    raw
echo -e "${GREEN}‚úÖ ƒê√£ c·∫•u h√¨nh UART${NC}"
echo ""

# 5. Ki·ªÉm tra GPIO DE/RE
echo -e "${YELLOW}üìå [5/8] Ki·ªÉm tra GPIO cho DE/RE control...${NC}"
if command -v gpioinfo &> /dev/null; then
    gpioinfo | grep -E "GPIO1_D3|GPIO1_D2" || echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y GPIO info${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  gpioinfo kh√¥ng c√≥, c√†i ƒë·∫∑t: sudo apt-get install gpiod${NC}"
fi
echo ""

# 6. Loopback test
echo -e "${YELLOW}üìå [6/8] Loopback test (n·ªëi A-B ng·∫Øn m·∫°ch)...${NC}"
echo -e "${YELLOW}B·∫°n c·∫ßn ng·∫Øn m·∫°ch A-B ƒë·ªÉ test!${NC}"
read -p "ƒê√£ ng·∫Øn m·∫°ch A-B? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "TEST123" > /dev/ttyOHT485 &
    sleep 0.2
    RECEIVED=$(timeout 1 cat /dev/ttyOHT485 || echo "TIMEOUT")
    if [[ "$RECEIVED" == *"TEST123"* ]]; then
        echo -e "${GREEN}‚úÖ Loopback OK - UART ho·∫°t ƒë·ªông!${NC}"
    else
        echo -e "${RED}‚ùå Loopback FAILED - Ki·ªÉm tra hardware!${NC}"
        echo "Received: $RECEIVED"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  B·ªè qua loopback test${NC}"
fi
echo ""

# 7. Test Modbus RTU read
echo -e "${YELLOW}üìå [7/8] Test Modbus RTU read slave...${NC}"
read -p "Nh·∫≠p Slave Address (1-247, m·∫∑c ƒë·ªãnh 1): " SLAVE_ADDR
SLAVE_ADDR=${SLAVE_ADDR:-1}

# Convert to hex
SLAVE_HEX=$(printf '%02x' $SLAVE_ADDR)

echo -e "G·ª≠i Modbus RTU Read Holding Register request..."
echo -e "  Slave: $SLAVE_ADDR (0x$SLAVE_HEX)"
echo -e "  Function: 0x03 (Read Holding Registers)"
echo -e "  Address: 0x0000"
echo -e "  Count: 1 register"

# Modbus frame: [SlaveID] [Function] [AddrHi] [AddrLo] [CountHi] [CountLo] [CRC]
# CRC t√≠nh cho slave 1: 0x84 0x0A
# B·∫°n c·∫ßn t√≠nh l·∫°i CRC cho slave kh√°c!

if [ "$SLAVE_ADDR" -eq 1 ]; then
    echo -ne '\x01\x03\x00\x00\x00\x01\x84\x0A' > /dev/ttyOHT485
    echo "ƒê√£ g·ª≠i frame Modbus cho slave 1"
else
    echo -e "${YELLOW}‚ö†Ô∏è  CRC ch∆∞a t√≠nh cho slave $SLAVE_ADDR, d√πng modpoll thay th·∫ø!${NC}"
fi

echo "ƒê·ª£i ph·∫£n h·ªìi (timeout 2s)..."
RESPONSE=$(timeout 2 cat /dev/ttyOHT485 | hexdump -C || echo "TIMEOUT")

if [[ "$RESPONSE" == "TIMEOUT" ]]; then
    echo -e "${RED}‚ùå TIMEOUT - Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ slave!${NC}"
    echo ""
    echo -e "${YELLOW}C√°c nguy√™n nh√¢n c√≥ th·ªÉ:${NC}"
    echo "  1. Slave address sai"
    echo "  2. Slave baudrate kh√°c 115200"
    echo "  3. Slave kh√¥ng ƒë∆∞·ª£c c·∫•p ngu·ªìn"
    echo "  4. Wiring sai (A-B b·ªã ƒë·∫£o)"
    echo "  5. Thi·∫øu termination 120Œ©"
    echo "  6. DE/RE kh√¥ng ƒë∆∞·ª£c control"
else
    echo -e "${GREEN}‚úÖ C√≥ ph·∫£n h·ªìi t·ª´ slave!${NC}"
    echo "$RESPONSE"
fi
echo ""

# 8. T·ªïng k·∫øt v√† khuy·∫øn ngh·ªã
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}üìã T·ªîNG K·∫æT V√Ä KHUY·∫æN NGH·ªä${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${YELLOW}üîß N·∫øu v·∫´n kh√¥ng c√≥ ph·∫£n h·ªìi, ki·ªÉm tra:${NC}"
echo ""
echo -e "${YELLOW}1. Hardware:${NC}"
echo "   - ƒêo ƒëi·ªán tr·ªü A-B: ph·∫£i ~60Œ© (2 termination)"
echo "   - ƒêo differential voltage idle: ph·∫£i > 0.2V"
echo "   - Ki·ªÉm tra wiring: A-A, B-B (kh√¥ng ch√©o)"
echo "   - Ki·ªÉm tra ngu·ªìn slave: LED power c√≥ s√°ng?"
echo ""
echo -e "${YELLOW}2. Software:${NC}"
echo "   - Slave baudrate: PH·∫¢I 115200, 8N1"
echo "   - Slave address: x√°c nh·∫≠n l·∫°i t·ª´ manual"
echo "   - Timing: ph·∫£i c√≥ gap T3.5 gi·ªØa frames"
echo "   - DE/RE control: ki·ªÉm tra GPIO toggle"
echo ""
echo -e "${YELLOW}3. Tools:${NC}"
echo "   - D√πng modpoll: sudo apt-get install modpoll"
echo "   - D√πng oscilloscope ƒë·ªÉ xem t√≠n hi·ªáu"
echo "   - D√πng logic analyzer ƒë·ªÉ decode Modbus"
echo ""
echo -e "${GREEN}‚úÖ Script ho√†n th√†nh!${NC}"

