{
  "title": "🔧 [FW #176] Implement Register Metadata API - Address & Mode Support",
  "body": "## 🎯 **OVERVIEW**\n\n**Related to:** #176  \n**Team:** Firmware Team  \n**Priority:** 🔴 Critical  \n**Estimate:** 40 hours (~1 week)  \n\n### 📋 **Context**\n\nIssue #176 yêu cầu expose register metadata (address, mode) từ Firmware. Hiện tại:\n- ✅ Firmware ĐÃ CÓ đầy đủ register definitions trong `register_map.h`\n- ✅ Firmware ĐÃ CÓ `register_info_t` structure với address, mode, access_level, etc.\n- ❌ THIẾU API endpoints để Backend có thể query register metadata\n\n### 🎯 **Objective**\n\nImplement HTTP API endpoints để expose register metadata, cho phép Backend:\n- Query tất cả registers của một module\n- Query metadata của một register cụ thể\n- Sử dụng existing register definitions từ `register_map.h`\n\n---\n\n## 📦 **TECHNICAL IMPLEMENTATION**\n\n### **Architecture Overview**\n\n```\n┌─────────────────────────────────────┐\n│   HTTP API Endpoints                │\n│  /api/v1/modules/{addr}/registers   │\n└──────────────┬──────────────────────┘\n               │\n┌──────────────▼──────────────────────┐\n│   Register Info Service             │\n│  - get_module_register_list()       │\n│  - get_single_register_info()       │\n└──────────────┬──────────────────────┘\n               │\n┌──────────────▼──────────────────────┐\n│   JSON Serializer                   │\n│  - serialize_register_to_json()     │\n│  - serialize_register_list_to_json()│\n└──────────────┬──────────────────────┘\n               │\n┌──────────────▼──────────────────────┐\n│   Register Map (register_map.h)     │\n│  - power_module_registers[]         │\n│  - motor_module_registers[]         │\n│  - safety_module_registers[]        │\n│  - dock_module_registers[]          │\n└─────────────────────────────────────┘\n```\n\n---\n\n## ✅ **TASKS BREAKDOWN**\n\n### **Task 1: Register Info Service Layer** (4h)\n\n**Files to create:**\n- `firmware_new/src/app/services/register_info_service.c`\n- `firmware_new/src/app/services/register_info_service.h`\n\n**Implementation:**\n\n```c\n// register_info_service.h\ntypedef struct {\n    const register_info_t* registers;\n    uint16_t count;\n    uint8_t module_addr;\n    const char* module_name;\n} register_list_response_t;\n\n// API Functions\nregister_list_response_t* get_module_register_list(uint8_t module_addr);\nconst register_info_t* get_single_register_info(uint8_t module_addr, uint16_t register_addr);\nvoid free_register_list_response(register_list_response_t* response);\n```\n\n**Technical Requirements:**\n- Switch case cho từng module (Power, Motor, Safety, Dock)\n- Return pointer đến existing register arrays\n- Memory management cho response structure\n- Error handling cho invalid module_addr\n\n**Acceptance Criteria:**\n- [ ] Function `get_module_register_list()` returns correct register count\n- [ ] Function `get_single_register_info()` returns correct register info\n- [ ] Memory properly managed (no leaks)\n- [ ] Handles invalid module addresses gracefully\n\n---\n\n### **Task 2: JSON Serializer** (6h)\n\n**Files to create:**\n- `firmware_new/src/app/utils/register_json_serializer.c`\n- `firmware_new/src/app/utils/register_json_serializer.h`\n\n**Implementation:**\n\n```c\n// Enum to string converters\nconst char* register_mode_to_string(uint8_t mode);\nconst char* register_data_type_to_string(uint8_t data_type);\nconst char* register_access_level_to_string(uint8_t access_level);\n\n// JSON serializers\nchar* serialize_register_to_json(const register_info_t* reg);\nchar* serialize_register_list_to_json(const register_list_response_t* response);\n```\n\n**JSON Format:**\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"module_addr\": 2,\n    \"module_name\": \"Power Module\",\n    \"register_count\": 51,\n    \"registers\": [\n      {\n        \"address\": \"0x0000\",\n        \"mode\": \"READ\",\n        \"data_type\": \"UINT16\",\n        \"access_level\": \"USER\",\n        \"is_safe_register\": false,\n        \"unit\": \"V\",\n        \"description\": \"Battery pack voltage\",\n        \"min_value\": 0,\n        \"max_value\": 65535,\n        \"default_value\": 0\n      }\n    ]\n  }\n}\n```\n\n**Technical Requirements:**\n- Proper JSON formatting với escaping\n- Buffer size calculation (dynamic allocation)\n- Enum to string conversion cho mode, data_type, access_level\n- Memory management (caller must free returned string)\n\n**Acceptance Criteria:**\n- [ ] Valid JSON output (parseable)\n- [ ] All enum values converted to strings correctly\n- [ ] Hex address format (0x0000)\n- [ ] No buffer overflows\n- [ ] Memory properly freed\n\n---\n\n### **Task 3: HTTP API Endpoints** (8h)\n\n**Files to create:**\n- `firmware_new/src/app/api/register_metadata_api.c`\n- `firmware_new/src/app/api/register_metadata_api.h`\n\n**Endpoints to implement:**\n\n#### **1. GET /api/v1/modules/{module_addr}/registers**\n\nList all registers cho một module.\n\n**URL Parameters:**\n- `module_addr`: Module address (2=Power, 3=Safety, 4=Motor, 5=Dock)\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"module_addr\": 2,\n    \"module_name\": \"Power Module\",\n    \"register_count\": 51,\n    \"registers\": [ /* array of registers */ ]\n  }\n}\n```\n\n**Error Responses:**\n- `400 Bad Request`: Missing module_addr\n- `404 Not Found`: Module not found\n- `500 Internal Server Error`: Serialization failed\n\n#### **2. GET /api/v1/modules/{module_addr}/registers/{register_addr}**\n\nGet metadata cho một register cụ thể.\n\n**URL Parameters:**\n- `module_addr`: Module address\n- `register_addr`: Register address (hex format, e.g., 0x0000)\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"address\": \"0x0000\",\n    \"mode\": \"READ\",\n    \"data_type\": \"UINT16\",\n    \"access_level\": \"USER\",\n    \"is_safe_register\": false,\n    \"unit\": \"V\",\n    \"description\": \"Battery pack voltage\",\n    \"min_value\": 0,\n    \"max_value\": 65535,\n    \"default_value\": 0\n  }\n}\n```\n\n**Technical Requirements:**\n- URL parameter parsing\n- HTTP status code handling\n- Content-Type: application/json\n- Error response formatting\n- Memory cleanup after response sent\n\n**Acceptance Criteria:**\n- [ ] Both endpoints respond with correct status codes\n- [ ] Valid JSON responses\n- [ ] Proper error handling và error messages\n- [ ] No memory leaks\n- [ ] Integration với existing HTTP server\n\n---\n\n### **Task 4: Populate Register Definitions** (16h)\n\n**Files to create:**\n- `firmware_new/src/hal/register/register_info.c`\n\n**Implementation:**\n\nDefine arrays của `register_info_t` cho từng module:\n\n```c\n// Power Module (51 registers)\nconst register_info_t power_module_registers[] = {\n    {\n        .address = POWER_REG_BATTERY_VOLTAGE,\n        .mode = REG_MODE_READ_ONLY,\n        .data_type = REG_DATA_TYPE_UINT16,\n        .access_level = REG_ACCESS_USER,\n        .is_safe_register = false,\n        .description = \"Battery pack voltage\",\n        .unit = \"V\",\n        .min_value = 0,\n        .max_value = 65535,\n        .default_value = 0\n    },\n    // ... 50 more registers\n};\n\nconst uint16_t power_module_register_count = \n    sizeof(power_module_registers) / sizeof(register_info_t);\n```\n\n**Registers to define:**\n\n| Module | Count | Address Range | Notes |\n|--------|-------|---------------|-------|\n| Power | 51 | 0x0000-0x0109 | DalyBMS, SK60X, INA219, Relays |\n| Safety | ~30 | 0x0000-0x00FF | Analog, Digital, Relays, Zones |\n| Motor | ~25 | 0x0000-0x0106 | Motor1, Motor2, DI, DO |\n| Dock | ~40 | 0x0000-0x00FF | IMU, Magnetic, Navigation, Docking |\n\n**Technical Requirements:**\n- Accurate mode assignment (READ/WRITE/READ_WRITE)\n- Correct data types\n- Appropriate access levels\n- Safety-critical flags\n- Meaningful descriptions\n- Proper units\n- Realistic min/max/default values\n\n**Reference:**\n- Source: `firmware_new/include/register_map.h`\n- Lines 84-385 contain all register definitions\n\n**Acceptance Criteria:**\n- [ ] All Power Module registers defined (51)\n- [ ] All Safety Module registers defined (~30)\n- [ ] All Motor Module registers defined (~25)\n- [ ] All Dock Module registers defined (~40)\n- [ ] Correct mode for each register\n- [ ] Valid ranges for writable registers\n\n---\n\n### **Task 5: Unit Testing** (4h)\n\n**Files to create:**\n- `firmware_new/tests/test_register_metadata_api.c`\n\n**Test Cases:**\n\n```c\nvoid test_get_power_module_registers(void);\nvoid test_get_single_register_info(void);\nvoid test_serialize_register_to_json(void);\nvoid test_serialize_register_list_to_json(void);\nvoid test_invalid_module_addr(void);\nvoid test_invalid_register_addr(void);\nvoid test_json_format_validation(void);\nvoid test_memory_leaks(void);\n```\n\n**Technical Requirements:**\n- Unity test framework\n- Test all public APIs\n- Negative test cases\n- Memory leak detection\n- JSON validation\n\n**Acceptance Criteria:**\n- [ ] All unit tests passing\n- [ ] Code coverage > 80%\n- [ ] No memory leaks detected\n- [ ] Edge cases covered\n\n---\n\n### **Task 6: Documentation** (2h)\n\n**Files to create:**\n- `firmware_new/docs/API_REGISTER_METADATA.md`\n\n**Documentation sections:**\n1. Overview\n2. Endpoints specification\n3. Request/Response examples\n4. Error codes\n5. Module mapping table\n6. Register mode definitions\n7. Usage examples\n8. Integration guide\n\n**Acceptance Criteria:**\n- [ ] Complete API documentation\n- [ ] Request/Response examples\n- [ ] Error handling documented\n- [ ] Integration examples\n\n---\n\n## 🔧 **TECHNICAL SPECIFICATIONS**\n\n### **Register Modes**\n\n```c\ntypedef enum {\n    REG_MODE_READ_ONLY = 0x01,    // Backend can only read\n    REG_MODE_WRITE_ONLY = 0x02,   // Backend can only write\n    REG_MODE_READ_WRITE = 0x03,   // Backend can read and write\n    REG_MODE_WRITE_ONCE = 0x04    // Config register (write once)\n} register_mode_t;\n```\n\n### **Data Types**\n\n```c\ntypedef enum {\n    REG_DATA_TYPE_STRING = 0,\n    REG_DATA_TYPE_UINT8 = 1,\n    REG_DATA_TYPE_UINT16 = 2,\n    REG_DATA_TYPE_UINT32 = 3,\n    REG_DATA_TYPE_INT8 = 4,\n    REG_DATA_TYPE_INT16 = 5,\n    REG_DATA_TYPE_INT32 = 6,\n    REG_DATA_TYPE_FLOAT = 7\n} register_data_type_t;\n```\n\n### **Access Levels**\n\n```c\ntypedef enum {\n    REG_ACCESS_USER = 1,      // Normal user access\n    REG_ACCESS_ADMIN = 2,     // Admin access required\n    REG_ACCESS_SYSTEM = 3     // System-level access only\n} register_access_level_t;\n```\n\n### **Module Address Mapping**\n\n| Module | Address | Type |\n|--------|---------|------|\n| Power | 0x02 | Power Module |\n| Safety | 0x03 | Safety Module |\n| Travel Motor | 0x04 | Travel Motor Module |\n| Dock | 0x05 | Dock & Location Module |\n\n---\n\n## 🧪 **TESTING REQUIREMENTS**\n\n### **Manual Testing Checklist**\n\n```bash\n# Test 1: Get Power Module registers\ncurl http://localhost:8081/api/v1/modules/2/registers\n\n# Expected: JSON with 51 registers\n\n# Test 2: Get specific register\ncurl http://localhost:8081/api/v1/modules/2/registers/0x0000\n\n# Expected: Battery voltage register info\n\n# Test 3: Invalid module\ncurl http://localhost:8081/api/v1/modules/99/registers\n\n# Expected: 404 Not Found\n\n# Test 4: Invalid register\ncurl http://localhost:8081/api/v1/modules/2/registers/0xFFFF\n\n# Expected: 404 Not Found\n```\n\n### **Integration Testing**\n\n- [ ] Test với Backend sync service\n- [ ] Verify JSON parsing trong Backend\n- [ ] Performance test (response time < 100ms)\n- [ ] Load test (100 concurrent requests)\n\n---\n\n## 📊 **SUCCESS CRITERIA**\n\n### **Functional Requirements**\n- ✅ API endpoints respond với correct status codes\n- ✅ JSON format valid và parseable\n- ✅ All registers có complete metadata\n- ✅ Error handling comprehensive\n\n### **Non-Functional Requirements**\n- ✅ Response time < 100ms\n- ✅ No memory leaks\n- ✅ Thread-safe implementation\n- ✅ Code coverage > 80%\n\n### **Integration Requirements**\n- ✅ Backend có thể query register metadata\n- ✅ Backend có thể sync vào database\n- ✅ Frontend có thể display register info\n\n---\n\n## 📅 **TIMELINE**\n\n| Week | Tasks | Deliverables |\n|------|-------|-------------|\n| Week 1 - Day 1-2 | Task 1 + Task 2 | Service layer + JSON serializer |\n| Week 1 - Day 3 | Task 3 (partial) | HTTP endpoints skeleton |\n| Week 1 - Day 4-5 | Task 4 | Register definitions |\n| Week 2 - Day 1 | Task 3 (complete) + Task 5 | API complete + Tests |\n| Week 2 - Day 2 | Task 6 + Integration | Docs + Testing |\n\n**Total Estimate:** 40 hours (~1 week with 1 FW engineer)\n\n---\n\n## 🔗 **DEPENDENCIES**\n\n### **Depends On:**\n- Existing `register_map.h` definitions\n- Existing HTTP server infrastructure\n- Existing `get_register_info()` function\n\n### **Blocks:**\n- Backend Issue: \"Sync Register Metadata from Firmware\" (#TBD)\n- Frontend display of register metadata\n\n---\n\n## 📚 **REFERENCES**\n\n### **Files to Reference:**\n- `firmware_new/include/register_map.h` - Register definitions\n- `firmware_new/src/hal/register/register_info.h` - Register info structure\n- `backend/app/models/register.py` - Backend register model\n\n### **Related Issues:**\n- #176 - Original issue requesting address & mode support\n\n---\n\n## 💡 **IMPLEMENTATION NOTES**\n\n### **Memory Management**\n- JSON strings are dynamically allocated - caller MUST free\n- Response structures should be freed after use\n- Use valgrind to detect memory leaks\n\n### **Performance Considerations**\n- Register arrays are const - no copying needed\n- JSON serialization is the bottleneck - optimize if needed\n- Consider caching JSON responses if performance critical\n\n### **Error Handling**\n- Always return valid JSON (even for errors)\n- Use appropriate HTTP status codes\n- Log errors for debugging\n\n---\n\n## ✅ **DEFINITION OF DONE**\n\n- [ ] All 6 tasks completed\n- [ ] Unit tests passing (coverage > 80%)\n- [ ] Manual testing completed\n- [ ] Documentation updated\n- [ ] Code reviewed and approved\n- [ ] No memory leaks detected\n- [ ] Integration tested with Backend\n- [ ] Performance requirements met (<100ms)\n- [ ] Merged to main branch\n\n---\n\n**Assigned to:** @firmware-team  \n**Labels:** `firmware`, `api`, `enhancement`, `priority: high`  \n**Milestone:** Issue #176 Resolution",
  "labels": ["firmware", "api", "enhancement", "priority: high"],
  "assignees": []
}

