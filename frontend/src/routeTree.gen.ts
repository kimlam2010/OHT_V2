/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainLayoutRouteImport } from './routes/_main-layout'

const AuthRouteLazyRouteImport = createFileRoute('/_auth')()
const IndexLazyRouteImport = createFileRoute('/')()
const AuthLoginLazyRouteImport = createFileRoute('/_auth/login')()
const MainLayoutMonitoringRouteLazyRouteImport = createFileRoute(
  '/_main-layout/monitoring',
)()
const MainLayoutDashboardRouteLazyRouteImport = createFileRoute(
  '/_main-layout/dashboard',
)()
const MainLayoutMonitoringIndexLazyRouteImport = createFileRoute(
  '/_main-layout/monitoring/',
)()
const MainLayoutDashboardIndexLazyRouteImport = createFileRoute(
  '/_main-layout/dashboard/',
)()

const AuthRouteLazyRoute = AuthRouteLazyRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/_auth/route.lazy').then((d) => d.Route))
const MainLayoutRoute = MainLayoutRouteImport.update({
  id: '/_main-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const AuthLoginLazyRoute = AuthLoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteLazyRoute,
} as any).lazy(() => import('./routes/_auth/login.lazy').then((d) => d.Route))
const MainLayoutMonitoringRouteLazyRoute =
  MainLayoutMonitoringRouteLazyRouteImport.update({
    id: '/monitoring',
    path: '/monitoring',
    getParentRoute: () => MainLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_main-layout/monitoring/route.lazy').then((d) => d.Route),
  )
const MainLayoutDashboardRouteLazyRoute =
  MainLayoutDashboardRouteLazyRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => MainLayoutRoute,
  } as any).lazy(() =>
    import('./routes/_main-layout/dashboard/route.lazy').then((d) => d.Route),
  )
const MainLayoutMonitoringIndexLazyRoute =
  MainLayoutMonitoringIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainLayoutMonitoringRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_main-layout/monitoring/index.lazy').then((d) => d.Route),
  )
const MainLayoutDashboardIndexLazyRoute =
  MainLayoutDashboardIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => MainLayoutDashboardRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_main-layout/dashboard/index.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof MainLayoutDashboardRouteLazyRouteWithChildren
  '/monitoring': typeof MainLayoutMonitoringRouteLazyRouteWithChildren
  '/login': typeof AuthLoginLazyRoute
  '/dashboard/': typeof MainLayoutDashboardIndexLazyRoute
  '/monitoring/': typeof MainLayoutMonitoringIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof AuthLoginLazyRoute
  '/dashboard': typeof MainLayoutDashboardIndexLazyRoute
  '/monitoring': typeof MainLayoutMonitoringIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/_main-layout': typeof MainLayoutRouteWithChildren
  '/_auth': typeof AuthRouteLazyRouteWithChildren
  '/_main-layout/dashboard': typeof MainLayoutDashboardRouteLazyRouteWithChildren
  '/_main-layout/monitoring': typeof MainLayoutMonitoringRouteLazyRouteWithChildren
  '/_auth/login': typeof AuthLoginLazyRoute
  '/_main-layout/dashboard/': typeof MainLayoutDashboardIndexLazyRoute
  '/_main-layout/monitoring/': typeof MainLayoutMonitoringIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/monitoring'
    | '/login'
    | '/dashboard/'
    | '/monitoring/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/dashboard' | '/monitoring'
  id:
    | '__root__'
    | '/'
    | '/_main-layout'
    | '/_auth'
    | '/_main-layout/dashboard'
    | '/_main-layout/monitoring'
    | '/_auth/login'
    | '/_main-layout/dashboard/'
    | '/_main-layout/monitoring/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MainLayoutRoute: typeof MainLayoutRouteWithChildren
  AuthRouteLazyRoute: typeof AuthRouteLazyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main-layout': {
      id: '/_main-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginLazyRouteImport
      parentRoute: typeof AuthRouteLazyRoute
    }
    '/_main-layout/monitoring': {
      id: '/_main-layout/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof MainLayoutMonitoringRouteLazyRouteImport
      parentRoute: typeof MainLayoutRoute
    }
    '/_main-layout/dashboard': {
      id: '/_main-layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainLayoutDashboardRouteLazyRouteImport
      parentRoute: typeof MainLayoutRoute
    }
    '/_main-layout/monitoring/': {
      id: '/_main-layout/monitoring/'
      path: '/'
      fullPath: '/monitoring/'
      preLoaderRoute: typeof MainLayoutMonitoringIndexLazyRouteImport
      parentRoute: typeof MainLayoutMonitoringRouteLazyRoute
    }
    '/_main-layout/dashboard/': {
      id: '/_main-layout/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof MainLayoutDashboardIndexLazyRouteImport
      parentRoute: typeof MainLayoutDashboardRouteLazyRoute
    }
  }
}

interface MainLayoutDashboardRouteLazyRouteChildren {
  MainLayoutDashboardIndexLazyRoute: typeof MainLayoutDashboardIndexLazyRoute
}

const MainLayoutDashboardRouteLazyRouteChildren: MainLayoutDashboardRouteLazyRouteChildren =
  {
    MainLayoutDashboardIndexLazyRoute: MainLayoutDashboardIndexLazyRoute,
  }

const MainLayoutDashboardRouteLazyRouteWithChildren =
  MainLayoutDashboardRouteLazyRoute._addFileChildren(
    MainLayoutDashboardRouteLazyRouteChildren,
  )

interface MainLayoutMonitoringRouteLazyRouteChildren {
  MainLayoutMonitoringIndexLazyRoute: typeof MainLayoutMonitoringIndexLazyRoute
}

const MainLayoutMonitoringRouteLazyRouteChildren: MainLayoutMonitoringRouteLazyRouteChildren =
  {
    MainLayoutMonitoringIndexLazyRoute: MainLayoutMonitoringIndexLazyRoute,
  }

const MainLayoutMonitoringRouteLazyRouteWithChildren =
  MainLayoutMonitoringRouteLazyRoute._addFileChildren(
    MainLayoutMonitoringRouteLazyRouteChildren,
  )

interface MainLayoutRouteChildren {
  MainLayoutDashboardRouteLazyRoute: typeof MainLayoutDashboardRouteLazyRouteWithChildren
  MainLayoutMonitoringRouteLazyRoute: typeof MainLayoutMonitoringRouteLazyRouteWithChildren
}

const MainLayoutRouteChildren: MainLayoutRouteChildren = {
  MainLayoutDashboardRouteLazyRoute:
    MainLayoutDashboardRouteLazyRouteWithChildren,
  MainLayoutMonitoringRouteLazyRoute:
    MainLayoutMonitoringRouteLazyRouteWithChildren,
}

const MainLayoutRouteWithChildren = MainLayoutRoute._addFileChildren(
  MainLayoutRouteChildren,
)

interface AuthRouteLazyRouteChildren {
  AuthLoginLazyRoute: typeof AuthLoginLazyRoute
}

const AuthRouteLazyRouteChildren: AuthRouteLazyRouteChildren = {
  AuthLoginLazyRoute: AuthLoginLazyRoute,
}

const AuthRouteLazyRouteWithChildren = AuthRouteLazyRoute._addFileChildren(
  AuthRouteLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MainLayoutRoute: MainLayoutRouteWithChildren,
  AuthRouteLazyRoute: AuthRouteLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
