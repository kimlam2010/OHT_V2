#!/usr/bin/env python3
"""
Test UART1 v·ªõi ch√¢n 46 (TX) v√† 47 (RX)
"""

import serial
import time
import os

def test_uart1_pins():
    """Test UART1 v·ªõi ch√¢n 46 v√† 47"""
    print("üîß Test UART1 v·ªõi ch√¢n 46 (TX) v√† 47 (RX)")
    print("=" * 50)
    
    # Ki·ªÉm tra GPIO 46 v√† 47
    print("üìã Ki·ªÉm tra GPIO 46 v√† 47:")
    try:
        with open('/sys/class/gpio/gpio46/direction', 'r') as f:
            gpio46_mode = f.read().strip()
        with open('/sys/class/gpio/gpio47/direction', 'r') as f:
            gpio47_mode = f.read().strip()
        print(f"  GPIO 46 (TX): {gpio46_mode}")
        print(f"  GPIO 47 (RX): {gpio47_mode}")
    except Exception as e:
        print(f"  ‚ùå L·ªói ƒë·ªçc GPIO: {e}")
        return False
    
    # Ki·ªÉm tra UART1 device
    print("\nüìã Ki·ªÉm tra UART1 device:")
    if os.path.exists('/dev/ttyS1'):
        print("  ‚úÖ /dev/ttyS1 t·ªìn t·∫°i")
    else:
        print("  ‚ùå /dev/ttyS1 kh√¥ng t·ªìn t·∫°i")
        return False
    
    # Test UART1 communication
    print("\nüìã Test UART1 communication:")
    try:
        ser = serial.Serial(
            port='/dev/ttyS1',
            baudrate=115200,
            bytesize=serial.EIGHTBITS,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            timeout=1
        )
        print("  ‚úÖ UART1 m·ªü th√†nh c√¥ng")
        
        # G·ª≠i test data
        test_data = b'Hello UART1 Test\n'
        ser.write(test_data)
        print(f"  üì§ Sent: {test_data}")
        
        # ƒê·ªçc response
        response = ser.read(100)
        if response:
            print(f"  üì• Received: {response}")
        else:
            print("  ‚ö†Ô∏è  Kh√¥ng c√≥ response (expected - no loopback)")
        
        ser.close()
        print("  ‚úÖ UART1 ƒë√≥ng th√†nh c√¥ng")
        
    except Exception as e:
        print(f"  ‚ùå L·ªói UART1: {e}")
        return False
    
    # Test GPIO control
    print("\nüìã Test GPIO control:")
    try:
        # Set GPIO 46 (TX) to 1
        with open('/sys/class/gpio/gpio46/value', 'w') as f:
            f.write('1')
        
        # ƒê·ªçc gi√° tr·ªã
        with open('/sys/class/gpio/gpio46/value', 'r') as f:
            gpio46_value = f.read().strip()
        with open('/sys/class/gpio/gpio47/value', 'r') as f:
            gpio47_value = f.read().strip()
        
        print(f"  GPIO 46 (TX) = {gpio46_value}")
        print(f"  GPIO 47 (RX) = {gpio47_value}")
        
        # Set GPIO 46 (TX) back to 0
        with open('/sys/class/gpio/gpio46/value', 'w') as f:
            f.write('0')
        
        print("  ‚úÖ GPIO control test passed")
        
    except Exception as e:
        print(f"  ‚ùå L·ªói GPIO control: {e}")
        return False
    
    print("\n‚úÖ UART1 v·ªõi ch√¢n 46 v√† 47 test completed successfully!")
    return True

if __name__ == "__main__":
    if not test_uart1_pins():
        print("\n‚ùå Test failed!")
        exit(1)
